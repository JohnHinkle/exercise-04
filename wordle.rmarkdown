---
title: "exercise-04: wordle"
format: html
editor: visual
authors: Thi Yen Do and John Hinkle
---



## Create function 'load_dictionary()'



```{r}
load_dictionary <- function(f) {
  read.table(f, header = TRUE, sep = "\t", stringsAsFactors = FALSE, fill = TRUE)
}
```



## Create two lists, "valid_list" and "solution_list"



```{r}
valid_list <- load_dictionary("collins-scrabble-words-2019.txt")
solution_list <- load_dictionary("google-10000-english-usa-no-swears.txt")
```



## Check that the lists contain characters



```{r}
str(valid_list)
str(solution_list)
```



## Update "solution_list" to only include words included in "valid_list" using the 'intersect()' function



```{r}
solution_list <- intersect(solution_list$words, valid_list$words)
```



## Create 'pick_solution()'

FYI- whenever you are using any function, you do not need to explicitly call the default arguments. For example, when using strsplit(), fixed, perl, and useBytes are all set to be FALSE. This means that you do not have to type out 'strsplit(x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE)' you can just say strsplit(x, split). If you wanted to set, let's say perl to be TRUE, then you would need to type out 'strsplit(x, split, perl = TRUE).



```{r}
pick_solution <- function(solution_list, word_length = 5) {
  subset(solution_list, nchar(solution_list) == word_length) |>
  sample(size = 1) 
  ##|> strsplit("")
}
pick_solution(solution_list)
solution <- pick_solution(solution_list) # variable that contains the solution
```



## Create 'evaluate_guess()' helper function



```{r}
evaluate_guess <- function(guess, solution) {
  word_length <- length(solution)
  spaces <- rep("_", word_length)
  answer <- rep("_", word_length)
  for (i in 1:word_length) {
    if(guess[i] == solution[i]){
      spaces[i] <- "*"
      solution[i] <- "-"
    }
  }
  for (i in 1:word_length) {
    if(spaces[i] != "*"){
      x <- match(guess[i], solution)
      if(!is.na(x)) {
        spaces[i] <- "+"
        answer[x] <- "-"
      }
    }
  }
  spaces
}

# example
evaluate_guess(strsplit("flour", "")[[1]], 
               strsplit("rainy", "")[[1]])
```



## Create 'play_wordle()'


```{r}
play_wordle <- function(solution_list, word_length = 5, num_guesses = 6) {
  print(paste("You have", num_guesses, "chances to guess a word of length", word_length))
  guess_count <- 0
  solution <- pick_solution(solution_list) 
  solutionVec <- strsplit(solution, "")[[1]]
  lettersLeft <- LETTERS
  while (num_guesses > guess_count) {
    guess_count <- guess_count + 1
    guess <- readline("Enter your guess, then press <enter>: ")
    while (nchar(guess) != word_length) {
      guess <- readline("Guess must be five letters long!")
    }
    if (identical(guess,"giveu")){
      ##special code to end the game prematurely
      print(solution)
      break
    }
     guess <- toupper(guess)
     space <- strsplit(guess, "")[[1]]
     #evaluate guess and update keyboard
     resVec <- evaluate_guess(space, solutionVec)
     
     #update keyboard
     lettersLeft <- setdiff(lettersLeft, space)
     # print result
    print(paste(strsplit(guess, "")[[1]], collapse = " "))
    print(paste(resVec, collapse = " "))
    guess_left <- num_guesses-guess_count;
    print(paste("you have",guess_left,"guesses left"))
    print(paste(c("Letters left:", lettersLeft), collapse = " "))
    if (all(resVec == "G")) {
      print("You won!")
      return(guess_count)
    }
  }
  print(paste("Sorry, you lost! Answer was ", solution))
  return(guess_count)
}


play_wordle(solution_list)
```

